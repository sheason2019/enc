import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'dart:typed_data' as i2;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class _S2 extends i0.VersionedSchema {
  _S2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    operations,
    contacts,
    conversations,
    conversationContacts,
    messages,
    messageStates,
    messageSignatures,
  ];
  late final Shape0 operations = Shape0(
      source: i0.VersionedTable(
        entityName: 'operations',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 contacts = Shape1(
      source: i0.VersionedTable(
        entityName: 'contacts',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_5,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 conversations = Shape2(
      source: i0.VersionedTable(
        entityName: 'conversations',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_7,
          _column_8,
          _column_5,
          _column_3,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 conversationContacts = Shape3(
      source: i0.VersionedTable(
        entityName: 'conversation_contacts',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_9,
          _column_10,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 messages = Shape4(
      source: i0.VersionedTable(
        entityName: 'messages',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_11,
          _column_12,
          _column_13,
          _column_14,
          _column_15,
          _column_16,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 messageStates = Shape5(
      source: i0.VersionedTable(
        entityName: 'message_states',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_12,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape6 messageSignatures = Shape6(
      source: i0.VersionedTable(
        entityName: 'message_signatures',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_21,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get clientId =>
      columnsByName['client_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get clock =>
      columnsByName['clock']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<i2.Uint8List> get info =>
      columnsByName['info']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<String> get atoms =>
      columnsByName['atoms']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>('id', aliasedName, false,
        hasAutoIncrement: true,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>('client_id', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_2(String aliasedName) =>
    i1.GeneratedColumn<int>('clock', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<i2.Uint8List> _column_3(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>('info', aliasedName, false,
        type: i1.DriftSqlType.blob);
i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>('atoms', aliasedName, true,
        type: i1.DriftSqlType.string);

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get signPubkey =>
      columnsByName['sign_pubkey']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<i2.Uint8List> get snapshot =>
      columnsByName['snapshot']! as i1.GeneratedColumn<i2.Uint8List>;
}

i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>('sign_pubkey', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<i2.Uint8List> _column_6(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>('snapshot', aliasedName, false,
        type: i1.DriftSqlType.blob);

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get type =>
      columnsByName['type']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get ecdhPubkey =>
      columnsByName['ecdh_pubkey']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get signPubkey =>
      columnsByName['sign_pubkey']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<i2.Uint8List> get info =>
      columnsByName['info']! as i1.GeneratedColumn<i2.Uint8List>;
}

i1.GeneratedColumn<int> _column_7(String aliasedName) =>
    i1.GeneratedColumn<int>('type', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_8(String aliasedName) =>
    i1.GeneratedColumn<String>('ecdh_pubkey', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get conversationId =>
      columnsByName['conversation_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get contactId =>
      columnsByName['contact_id']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_9(String aliasedName) =>
    i1.GeneratedColumn<int>('conversation_id', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES conversations (id)'));
i1.GeneratedColumn<int> _column_10(String aliasedName) =>
    i1.GeneratedColumn<int>('contact_id', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES contacts (id)'));

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get conversationId =>
      columnsByName['conversation_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get contactId =>
      columnsByName['contact_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get messageType =>
      columnsByName['message_type']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get content =>
      columnsByName['content']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<int> _column_11(String aliasedName) =>
    i1.GeneratedColumn<int>('conversation_id', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_12(String aliasedName) =>
    i1.GeneratedColumn<int>('contact_id', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_13(String aliasedName) =>
    i1.GeneratedColumn<int>('message_type', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_14(String aliasedName) =>
    i1.GeneratedColumn<String>('uuid', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_15(String aliasedName) =>
    i1.GeneratedColumn<String>('content', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<DateTime> _column_16(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('created_at', aliasedName, false,
        type: i1.DriftSqlType.dateTime);

class Shape5 extends i0.VersionedTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get contactId =>
      columnsByName['contact_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get messageId =>
      columnsByName['message_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get receiveAt =>
      columnsByName['receive_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get checkedAt =>
      columnsByName['checked_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<int> _column_17(String aliasedName) =>
    i1.GeneratedColumn<int>('message_id', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<DateTime> _column_18(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('created_at', aliasedName, true,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<DateTime> _column_19(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('receive_at', aliasedName, true,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<DateTime> _column_20(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('checked_at', aliasedName, true,
        type: i1.DriftSqlType.dateTime);

class Shape6 extends i0.VersionedTable {
  Shape6({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<i2.Uint8List> get signature =>
      columnsByName['signature']! as i1.GeneratedColumn<i2.Uint8List>;
}

i1.GeneratedColumn<i2.Uint8List> _column_21(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>('signature', aliasedName, false,
        type: i1.DriftSqlType.blob);
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, _S2 schema) from1To2,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = _S2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, _S2 schema) from1To2,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from1To2: from1To2,
    ));
